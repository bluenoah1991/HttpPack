{"version":3,"sources":["../src/Protocol.js"],"names":["Encode","Decode","MSG_TYPE_SEND","MSG_TYPE_ACK","MSG_TYPE_RECEIVED","MSG_TYPE_RELEASE","MSG_TYPE_COMPLETED","QoS0","QoS1","QoS2","isBrowser","Function","allocUnsafe","val","Buffer","msg_type","qos","dup","msg_id","payload","offset","remaining_length","undefined","length","buffer","fixed_header","writeUInt8","writeUInt16BE","copy","total_length","readInt8","readUInt16BE"],"mappings":";;;;;QA8CgBA,M,GAAAA,M;QA0BAC,M,GAAAA,M;AAxEhB;;;;;;;;;;;;;;;;;;;;;;;;AAwBO,IAAMC,wCAAgB,GAAtB;AACA,IAAMC,sCAAe,GAArB;AACA,IAAMC,gDAAoB,GAA1B;AACA,IAAMC,8CAAmB,GAAzB;AACA,IAAMC,kDAAqB,GAA3B;;AAEA,IAAMC,sBAAO,CAAb;AACA,IAAMC,sBAAO,CAAb;AACA,IAAMC,sBAAO,CAAb;;AAEP,IAAIC,YAAU,IAAIC,QAAJ,CAAa,sDAAb,CAAd;;AAEA,SAASC,WAAT,CAAqBC,GAArB,EAAyB;AACrB;AACA,QAAIH,WAAJ,EAAiB;AACb;AACA,eAAO,IAAII,MAAJ,CAAWD,GAAX,CAAP;AACH,KAHD,MAGO;AACH,eAAOC,OAAOF,WAAP,CAAmBC,GAAnB,CAAP;AACH;AACJ;;AAEM,SAASb,MAAT,GAAkH;AAAA,QAAlGe,QAAkG,uEAAvF,GAAuF;AAAA,QAAlFC,GAAkF,uEAA5E,CAA4E;AAAA,QAAzEC,GAAyE,uEAAnE,CAAmE;AAAA,QAAhEC,MAAgE,uEAAvD,CAAuD;AAAA,QAApDC,OAAoD,uEAA1C,IAA0C;AAAA,QAApCC,MAAoC,uEAA3B,CAA2B;AAAA,QAAxBC,gBAAwB,uEAAL,IAAK;;AACrH,QAAGF,WAAWG,SAAd,EAAwB;AACpBD,2BAAmBA,oBAAoBF,QAAQI,MAA/C;AACH,KAFD,MAEO;AACHF,2BAAmB,CAAnB;AACH;AACD,QAAIG,SAASZ,YAAY,IAAIS,gBAAhB,CAAb;AACA,QAAII,eAAgBV,YAAY,CAAb,GAAmBC,OAAO,CAA1B,GAAgCC,OAAO,CAA1D;AACAO,WAAOE,UAAP,CAAkBD,YAAlB,EAAgC,CAAhC;AACAD,WAAOG,aAAP,CAAqBT,MAArB,EAA6B,CAA7B;AACAM,WAAOG,aAAP,CAAqBN,gBAArB,EAAuC,CAAvC;AACA,QAAGF,WAAWG,SAAd,EAAwB;AACpBH,gBAAQS,IAAR,CAAaJ,MAAb,EAAqB,CAArB,EAAwBJ,MAAxB,EAAgCA,SAASC,gBAAzC;AACH;AACD,WAAO;AACHN,kBAAUA,QADP;AAEHC,aAAKA,GAFF;AAGHC,aAAKA,GAHF;AAIHC,gBAAQA,MAJL;AAKHG,0BAAkBA,gBALf;AAMHQ,sBAAc,IAAIR,gBANf;AAOHF,iBAASA,OAPN;AAQHK,gBAAQA;AARL,KAAP;AAUH;;AAEM,SAASvB,MAAT,CAAgBuB,MAAhB,EAAmC;AAAA,QAAXJ,MAAW,uEAAF,CAAE;;AACtC,QAAGI,UAAUF,SAAb,EAAuB;AACnB,cAAM,wBAAN;AACH;AACD,QAAIG,eAAeD,OAAOM,QAAP,CAAgBV,MAAhB,CAAnB;AACA,QAAIL,WAAWU,gBAAgB,CAA/B;AACA,QAAIT,MAAM,CAACS,eAAe,GAAhB,KAAwB,CAAlC;AACA,QAAIR,MAAM,CAACQ,eAAe,GAAhB,KAAwB,CAAlC;AACA,QAAIP,SAASM,OAAOO,YAAP,CAAoBX,SAAS,CAA7B,CAAb;AACA,QAAIC,mBAAmBG,OAAOO,YAAP,CAAoBX,SAAS,CAA7B,CAAvB;AACA,QAAID,UAAUP,YAAYS,gBAAZ,CAAd;AACAG,WAAOI,IAAP,CAAYT,OAAZ,EAAqB,CAArB,EAAwBC,SAAS,CAAjC,EAAoCA,SAAS,CAAT,GAAaC,gBAAjD;AACA,WAAO;AACHN,kBAAUA,QADP;AAEHC,aAAKA,GAFF;AAGHC,aAAKA,GAHF;AAIHC,gBAAQA,MAJL;AAKHG,0BAAkBA,gBALf;AAMHQ,sBAAc,IAAIR,gBANf;AAOHF,iBAASA;AAPN,KAAP;AASH","file":"Protocol.js","sourcesContent":["/**\n * bit           | 7 | 6 | 5 | 4 |  3  |  2  |    1     |    0     |\n * byte1         | Message Type  | QoS Level | Dup flag | Reserved |\n * byte1 - byte2 |              Message Identifiers\n * byte3 - byte4 |              Remaining Length\n * \n * * * Message Type * *\n * 0 Reserved\n * 1 Send\n * 2 Ack\n * 3 Received\n * 4 Released\n * 5 Completed\n * \n * * * QoS Level * *\n * 0 1 2\n * \n * * * Dup flag * *\n * 0 1\n * \n * * * Message Identifiers * *\n * 0 - 2^32\n */\n\nexport const MSG_TYPE_SEND = 0x1;\nexport const MSG_TYPE_ACK = 0x2;\nexport const MSG_TYPE_RECEIVED = 0x3;\nexport const MSG_TYPE_RELEASE = 0x4;\nexport const MSG_TYPE_COMPLETED = 0x5;\n\nexport const QoS0 = 0;\nexport const QoS1 = 1;\nexport const QoS2 = 2;\n\nvar isBrowser=new Function(\"try {return this===window;} catch(e) {return false;}\");\n\nfunction allocUnsafe(val){\n    // check whether is running under nodejs or browser\n    if (isBrowser()) {\n        // https://github.com/feross/buffer\n        return new Buffer(val);\n    } else {\n        return Buffer.allocUnsafe(val);\n    }\n}\n\nexport function Encode(msg_type = 0x1, qos = 0, dup = 0, msg_id = 0, payload = null, offset = 0, remaining_length = null){\n    if(payload != undefined){\n        remaining_length = remaining_length || payload.length;\n    } else {\n        remaining_length = 0;\n    }  \n    let buffer = allocUnsafe(5 + remaining_length);\n    let fixed_header = (msg_type << 4) | (qos << 2) | (dup << 1);\n    buffer.writeUInt8(fixed_header, 0);\n    buffer.writeUInt16BE(msg_id, 1);\n    buffer.writeUInt16BE(remaining_length, 3);\n    if(payload != undefined){\n        payload.copy(buffer, 5, offset, offset + remaining_length);\n    }\n    return {\n        msg_type: msg_type,\n        qos: qos,\n        dup: dup,\n        msg_id: msg_id,\n        remaining_length: remaining_length,\n        total_length: 5 + remaining_length,\n        payload: payload,\n        buffer: buffer\n    };\n};\n\nexport function Decode(buffer, offset = 0){\n    if(buffer == undefined){\n        throw 'Buffer cannot be null.';\n    }\n    let fixed_header = buffer.readInt8(offset);\n    let msg_type = fixed_header >> 4;\n    let qos = (fixed_header & 0xf) >> 2;\n    let dup = (fixed_header & 0x3) >> 1;\n    let msg_id = buffer.readUInt16BE(offset + 1);\n    let remaining_length = buffer.readUInt16BE(offset + 3);\n    let payload = allocUnsafe(remaining_length);\n    buffer.copy(payload, 0, offset + 5, offset + 5 + remaining_length);\n    return {\n        msg_type: msg_type,\n        qos: qos,\n        dup: dup,\n        msg_id: msg_id,\n        remaining_length: remaining_length,\n        total_length: 5 + remaining_length,\n        payload: payload\n    };\n};"]}