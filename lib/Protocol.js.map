{"version":3,"sources":["../src/Protocol.js"],"names":["Encode","Decode","MSG_TYPE_SEND","MSG_TYPE_ACK","MSG_TYPE_RECEIVED","MSG_TYPE_RELEASE","MSG_TYPE_COMPLETED","QoS0","QoS1","QoS2","msg_type","qos","dup","msg_id","payload","offset","remaining_length","undefined","length","buffer","Buffer","allocUnsafe","fixed_header","writeUInt8","writeInt16BE","writeUInt16BE","copy","total_length","readInt8","readInt16BE","readUInt16BE"],"mappings":";;;;;QAkCgBA,M,GAAAA,M;QA0BAC,M,GAAAA,M;AA5DhB;;;;;;;;;;;;;;;;;;;;;;;;AAwBO,IAAMC,wCAAgB,GAAtB;AACA,IAAMC,sCAAe,GAArB;AACA,IAAMC,gDAAoB,GAA1B;AACA,IAAMC,8CAAmB,GAAzB;AACA,IAAMC,kDAAqB,GAA3B;;AAEA,IAAMC,sBAAO,CAAb;AACA,IAAMC,sBAAO,CAAb;AACA,IAAMC,sBAAO,CAAb;;AAEA,SAAST,MAAT,GAAkH;AAAA,QAAlGU,QAAkG,uEAAvF,GAAuF;AAAA,QAAlFC,GAAkF,uEAA5E,CAA4E;AAAA,QAAzEC,GAAyE,uEAAnE,CAAmE;AAAA,QAAhEC,MAAgE,uEAAvD,CAAuD;AAAA,QAApDC,OAAoD,uEAA1C,IAA0C;AAAA,QAApCC,MAAoC,uEAA3B,CAA2B;AAAA,QAAxBC,gBAAwB,uEAAL,IAAK;;AACrH,QAAGF,WAAWG,SAAd,EAAwB;AACpBD,2BAAmBA,oBAAoBF,QAAQI,MAA/C;AACH,KAFD,MAEO;AACHF,2BAAmB,CAAnB;AACH;AACD,QAAIG,SAASC,OAAOC,WAAP,CAAmB,IAAIL,gBAAvB,CAAb;AACA,QAAIM,eAAgBZ,YAAY,CAAb,GAAmBC,OAAO,CAA1B,GAAgCC,OAAO,CAA1D;AACAO,WAAOI,UAAP,CAAkBD,YAAlB,EAAgC,CAAhC;AACAH,WAAOK,YAAP,CAAoBX,MAApB,EAA4B,CAA5B;AACAM,WAAOM,aAAP,CAAqBT,gBAArB,EAAuC,CAAvC;AACA,QAAGF,WAAWG,SAAd,EAAwB;AACpBH,gBAAQY,IAAR,CAAaP,MAAb,EAAqB,CAArB,EAAwBJ,MAAxB,EAAgCA,SAASC,gBAAzC;AACH;AACD,WAAO;AACHN,kBAAUA,QADP;AAEHC,aAAKA,GAFF;AAGHC,aAAKA,GAHF;AAIHC,gBAAQA,MAJL;AAKHG,0BAAkBA,gBALf;AAMHW,sBAAc,IAAIX,gBANf;AAOHF,iBAASA,OAPN;AAQHK,gBAAQA;AARL,KAAP;AAUH;;AAEM,SAASlB,MAAT,CAAgBkB,MAAhB,EAAmC;AAAA,QAAXJ,MAAW,uEAAF,CAAE;;AACtC,QAAGI,UAAUF,SAAb,EAAuB;AACnB,cAAM,wBAAN;AACH;AACD,QAAIK,eAAeH,OAAOS,QAAP,CAAgBb,MAAhB,CAAnB;AACA,QAAIL,WAAWY,gBAAgB,CAA/B;AACA,QAAIX,MAAM,CAACW,eAAe,GAAhB,KAAwB,CAAlC;AACA,QAAIV,MAAM,CAACU,eAAe,GAAhB,KAAwB,CAAlC;AACA,QAAIT,SAASM,OAAOU,WAAP,CAAmBd,SAAS,CAA5B,CAAb;AACA,QAAIC,mBAAmBG,OAAOW,YAAP,CAAoBf,SAAS,CAA7B,CAAvB;AACA,QAAID,UAAUM,OAAOC,WAAP,CAAmBL,gBAAnB,CAAd;AACAG,WAAOO,IAAP,CAAYZ,OAAZ,EAAqB,CAArB,EAAwBC,SAAS,CAAjC,EAAoCA,SAAS,CAAT,GAAaC,gBAAjD;AACA,WAAO;AACHN,kBAAUA,QADP;AAEHC,aAAKA,GAFF;AAGHC,aAAKA,GAHF;AAIHC,gBAAQA,MAJL;AAKHG,0BAAkBA,gBALf;AAMHW,sBAAc,IAAIX,gBANf;AAOHF,iBAASA;AAPN,KAAP;AASH","file":"Protocol.js","sourcesContent":["/**\r\n * bit           | 7 | 6 | 5 | 4 |  3  |  2  |    1     |    0     |\r\n * byte1         | Message Type  | QoS Level | Dup flag | Reserved |\r\n * byte1 - byte2 |              Message Identifiers\r\n * byte3 - byte4 |              Remaining Length\r\n * \r\n * * * Message Type * *\r\n * 0 Reserved\r\n * 1 Send\r\n * 2 Ack\r\n * 3 Received\r\n * 4 Released\r\n * 5 Completed\r\n * \r\n * * * QoS Level * *\r\n * 0 1 2\r\n * \r\n * * * Dup flag * *\r\n * 0 1\r\n * \r\n * * * Message Identifiers * *\r\n * 0 - 2^32\r\n */\r\n\r\nexport const MSG_TYPE_SEND = 0x1;\r\nexport const MSG_TYPE_ACK = 0x2;\r\nexport const MSG_TYPE_RECEIVED = 0x3;\r\nexport const MSG_TYPE_RELEASE = 0x4;\r\nexport const MSG_TYPE_COMPLETED = 0x5;\r\n\r\nexport const QoS0 = 0;\r\nexport const QoS1 = 1;\r\nexport const QoS2 = 2;\r\n\r\nexport function Encode(msg_type = 0x1, qos = 0, dup = 0, msg_id = 0, payload = null, offset = 0, remaining_length = null){\r\n    if(payload != undefined){\r\n        remaining_length = remaining_length || payload.length;\r\n    } else {\r\n        remaining_length = 0;\r\n    }  \r\n    let buffer = Buffer.allocUnsafe(5 + remaining_length);\r\n    let fixed_header = (msg_type << 4) | (qos << 2) | (dup << 1);\r\n    buffer.writeUInt8(fixed_header, 0);\r\n    buffer.writeInt16BE(msg_id, 1);\r\n    buffer.writeUInt16BE(remaining_length, 3);\r\n    if(payload != undefined){\r\n        payload.copy(buffer, 5, offset, offset + remaining_length);\r\n    }\r\n    return {\r\n        msg_type: msg_type,\r\n        qos: qos,\r\n        dup: dup,\r\n        msg_id: msg_id,\r\n        remaining_length: remaining_length,\r\n        total_length: 5 + remaining_length,\r\n        payload: payload,\r\n        buffer: buffer\r\n    };\r\n};\r\n\r\nexport function Decode(buffer, offset = 0){\r\n    if(buffer == undefined){\r\n        throw 'Buffer cannot be null.';\r\n    }\r\n    let fixed_header = buffer.readInt8(offset);\r\n    let msg_type = fixed_header >> 4;\r\n    let qos = (fixed_header & 0xf) >> 2;\r\n    let dup = (fixed_header & 0x3) >> 1;\r\n    let msg_id = buffer.readInt16BE(offset + 1);\r\n    let remaining_length = buffer.readUInt16BE(offset + 3);\r\n    let payload = Buffer.allocUnsafe(remaining_length);\r\n    buffer.copy(payload, 0, offset + 5, offset + 5 + remaining_length);\r\n    return {\r\n        msg_type: msg_type,\r\n        qos: qos,\r\n        dup: dup,\r\n        msg_id: msg_id,\r\n        remaining_length: remaining_length,\r\n        total_length: 5 + remaining_length,\r\n        payload: payload\r\n    };\r\n};"]}