{"version":3,"sources":["../src/HttpPack.js"],"names":["MAX_REQUEST_NUMBER","HttpPack","opts","callback","undefined","requestCallbackHook","max_request_number","storage","defaultRequestOpts","method","url","forever","timeout","gzip","requestCallback","bind","requestOpts","Object","assign","heartbeat","loopHandle","setTimeout","loop","data","qos","pack","uniqueId","save","retry_times","retry_pack","cloneDeep","timestamp","add","msg_type","msg_id","payload","packs","unconfirmed","forEach","retry","requestInstance","body","combine","Buffer","concat","map","buffer","offset","length","push","total_length","error","response","statusCode","from","split","reply","receive","confirm","release"],"mappings":"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","file":"HttpPack.js","sourcesContent":["import request from 'request';\r\nimport _ from 'lodash';\r\nimport moment from 'moment';\r\n\r\nimport MemoryStorage from './MemoryStorage';\r\nimport {\r\n    Encode, \r\n    Decode,\r\n    MSG_TYPE_SEND,\r\n    MSG_TYPE_ACK,\r\n    MSG_TYPE_RECEIVED,\r\n    MSG_TYPE_RELEASE,\r\n    MSG_TYPE_COMPLETED,\r\n    QoS0, QoS1, QoS2\r\n} from './Protocol';\r\n\r\nconst MAX_REQUEST_NUMBER = 20;\r\n\r\nexport default class HttpPack {\r\n    constructor(opts, callback){\r\n        this.callback = callback != undefined ? callback : function(){};\r\n        this.requestCallbackHook = opts.requestCallbackHook != undefined ? opts.requestCallbackHook : function(){};\r\n        this.max_request_number = opts.max_request_number != undefined ? opts.max_request_number : MAX_REQUEST_NUMBER;\r\n        this.storage = opts.storage != undefined ? opts.storage : new MemoryStorage();\r\n        this.defaultRequestOpts = {\r\n            method: 'POST',\r\n            url: 'http://www.example.com/',\r\n            forever: true,\r\n            timeout: 60 * 1000,\r\n            gzip: true,\r\n            callback: this.requestCallback.bind(this)\r\n        };\r\n        this.requestOpts = opts.requestOpts != undefined ? Object.assign({}, this.defaultRequestOpts, opts.requestOpts) : this.defaultRequestOpts;\r\n        this.heartbeat = opts.heartbeat != undefined ? opts.heartbeat : 1000;\r\n        this.loopHandle = setTimeout(this.loop.bind(this), this.heartbeat);\r\n    }\r\n\r\n    commit(data, qos = 0){\r\n        let pack = Encode(MSG_TYPE_SEND, qos, 0, this.storage.uniqueId(), data);\r\n        this.storage.save(pack);\r\n    }\r\n\r\n    retry(pack){\r\n        if(pack.qos == QoS0){\r\n            return null;\r\n        } else {\r\n            if(pack.retry_times != undefined && pack.retry_times > 0) {\r\n                let retry_pack = _.cloneDeep(pack);\r\n                retry_pack.retry_times++;\r\n                retry_pack.timestamp = moment().add(retry_pack.retry_times * 5, 's');\r\n                return retry_pack;\r\n            } else {\r\n                let retry_pack = Encode(pack.msg_type, pack.qos, 1, pack.msg_id, pack.payload);\r\n                retry_pack.retry_times = 1;\r\n                retry_pack.timestamp = moment().add(retry_pack.retry_times * 5, 's');\r\n                return retry_pack;\r\n            }\r\n        }\r\n    }\r\n\r\n    loop(){\r\n        let packs = this.storage.unconfirmed(this.max_request_number);\r\n        packs.forEach(function(pack){\r\n            let retry_pack = this.retry(pack);\r\n            if(retry_pack != undefined){\r\n                this.storage.save(retry_pack);\r\n            }\r\n        }.bind(this));\r\n        // if(packs.length > 0){\r\n        //     this.requestInstance = request(Object.assign({}, this.requestOpts, {\r\n        //         body: this.combine(packs)\r\n        //     }));\r\n        // } else {\r\n        //     this.loopHandle = setTimeout(this.loop.bind(this), this.heartbeat);\r\n        // }\r\n        this.requestInstance = request(Object.assign({}, this.requestOpts, {\r\n            body: this.combine(packs)\r\n        }));\r\n    }\r\n\r\n    // combine packs return body\r\n    combine(packs){\r\n        return Buffer.concat(packs.map(function(pack){\r\n            return pack.buffer;\r\n        }));\r\n    }\r\n\r\n    // split body return packs\r\n    split(body){\r\n        let packs = [];\r\n        let offset = 0;\r\n        while(offset < body.length){\r\n            let pack = Decode(body, offset);\r\n            packs.push(pack);\r\n            offset += pack.total_length;\r\n        }\r\n        return packs;\r\n    }\r\n\r\n    requestCallback(error, response, body){\r\n        this.requestCallbackHook(error, response, body);\r\n        if(!error && response.statusCode >= 200 && response.statusCode < 300){\r\n            if(typeof body == 'string'){\r\n                body = Buffer.from(body);\r\n            }\r\n            let packs = this.split(body);\r\n            packs.forEach(function(pack){\r\n                if(pack.msg_type == MSG_TYPE_SEND){\r\n                    if(pack.qos == QoS0){\r\n                        this.callback(pack.payload, response);\r\n                    } else if(pack.qos == QoS1){\r\n                        let reply = Encode(MSG_TYPE_ACK, QoS0, 0, pack.msg_id);\r\n                        this.storage.save(reply);\r\n                    } else if(pack.qos == QoS2){\r\n                        this.storage.receive(pack.msg_id, pack.payload);\r\n                        let reply = Encode(MSG_TYPE_RECEIVED, QoS0, 0, pack.msg_id);\r\n                        this.storage.save(reply);\r\n                    }\r\n                } else if(pack.msg_type == MSG_TYPE_ACK){\r\n                    this.storage.confirm(pack.msg_id);\r\n                } else if(pack.msg_type == MSG_TYPE_RECEIVED){\r\n                    this.storage.confirm(pack.msg_id);\r\n                    let reply = Encode(MSG_TYPE_RELEASE, QoS1, 0, pack.msg_id);\r\n                    this.storage.save(reply);\r\n                } else if(pack.msg_type == MSG_TYPE_RELEASE){\r\n                    let payload = this.storage.release(pack.msg_id);\r\n                    if(payload != undefined){\r\n                        this.callback(pack.payload, response);\r\n                    }\r\n                    let reply = Encode(MSG_TYPE_COMPLETED, QoS0, 0, pack.msg_id);\r\n                    this.storage.save(reply);\r\n                } else if(pack.msg_type == MSG_TYPE_COMPLETED){\r\n                    this.storage.confirm(pack.msg_id);\r\n                }\r\n            }.bind(this));\r\n        }\r\n        this.loopHandle = setTimeout(this.loop.bind(this), this.heartbeat);\r\n    }\r\n}"]}